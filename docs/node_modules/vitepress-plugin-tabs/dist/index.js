var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));

// ../../node_modules/.pnpm/markdown-it-container@3.0.0/node_modules/markdown-it-container/index.js
var require_markdown_it_container = __commonJS({
  "../../node_modules/.pnpm/markdown-it-container@3.0.0/node_modules/markdown-it-container/index.js"(exports, module) {
    "use strict";
    module.exports = function container_plugin(md, name, options) {
      function validateDefault(params) {
        return params.trim().split(" ", 2)[0] === name;
      }
      function renderDefault(tokens, idx, _options, env, slf) {
        if (tokens[idx].nesting === 1) {
          tokens[idx].attrJoin("class", name);
        }
        return slf.renderToken(tokens, idx, _options, env, slf);
      }
      options = options || {};
      var min_markers = 3, marker_str = options.marker || ":", marker_char = marker_str.charCodeAt(0), marker_len = marker_str.length, validate = options.validate || validateDefault, render = options.render || renderDefault;
      function container2(state, startLine, endLine, silent) {
        var pos, nextLine, marker_count, markup, params, token, old_parent, old_line_max, auto_closed = false, start = state.bMarks[startLine] + state.tShift[startLine], max = state.eMarks[startLine];
        if (marker_char !== state.src.charCodeAt(start)) {
          return false;
        }
        for (pos = start + 1; pos <= max; pos++) {
          if (marker_str[(pos - start) % marker_len] !== state.src[pos]) {
            break;
          }
        }
        marker_count = Math.floor((pos - start) / marker_len);
        if (marker_count < min_markers) {
          return false;
        }
        pos -= (pos - start) % marker_len;
        markup = state.src.slice(start, pos);
        params = state.src.slice(pos, max);
        if (!validate(params, markup)) {
          return false;
        }
        if (silent) {
          return true;
        }
        nextLine = startLine;
        for (; ; ) {
          nextLine++;
          if (nextLine >= endLine) {
            break;
          }
          start = state.bMarks[nextLine] + state.tShift[nextLine];
          max = state.eMarks[nextLine];
          if (start < max && state.sCount[nextLine] < state.blkIndent) {
            break;
          }
          if (marker_char !== state.src.charCodeAt(start)) {
            continue;
          }
          if (state.sCount[nextLine] - state.blkIndent >= 4) {
            continue;
          }
          for (pos = start + 1; pos <= max; pos++) {
            if (marker_str[(pos - start) % marker_len] !== state.src[pos]) {
              break;
            }
          }
          if (Math.floor((pos - start) / marker_len) < marker_count) {
            continue;
          }
          pos -= (pos - start) % marker_len;
          pos = state.skipSpaces(pos);
          if (pos < max) {
            continue;
          }
          auto_closed = true;
          break;
        }
        old_parent = state.parentType;
        old_line_max = state.lineMax;
        state.parentType = "container";
        state.lineMax = nextLine;
        token = state.push("container_" + name + "_open", "div", 1);
        token.markup = markup;
        token.block = true;
        token.info = params;
        token.map = [startLine, nextLine];
        state.md.block.tokenize(state, startLine + 1, nextLine);
        token = state.push("container_" + name + "_close", "div", -1);
        token.markup = state.src.slice(start, pos);
        token.block = true;
        state.parentType = old_parent;
        state.lineMax = old_line_max;
        state.line = nextLine + (auto_closed ? 1 : 0);
        return true;
      }
      md.block.ruler.before("fence", "container_" + name, container2, {
        alt: ["paragraph", "reference", "blockquote", "list"]
      });
      md.renderer.rules["container_" + name + "_open"] = render;
      md.renderer.rules["container_" + name + "_close"] = render;
    };
  }
});

// src/node/markdownPlugin.ts
var import_markdown_it_container = __toESM(require_markdown_it_container(), 1);

// src/node/ruleBlockTab.ts
var tabMarker = "=";
var tabMarkerCode = tabMarker.charCodeAt(0);
var minTabMarkerLen = 2;
var ruleBlockTab = (state, startLine, endLine, silent) => {
  let pos = state.bMarks[startLine] + state.tShift[startLine];
  const max = state.eMarks[startLine];
  if (state.parentType !== "container") {
    return false;
  }
  if (pos + minTabMarkerLen > max) {
    return false;
  }
  const marker = state.src.charCodeAt(pos);
  if (marker !== tabMarkerCode) {
    return false;
  }
  const mem = pos;
  pos = state.skipChars(pos + 1, marker);
  const tabMarkerLen = pos - mem;
  if (tabMarkerLen < minTabMarkerLen - 1) {
    return false;
  }
  if (silent) {
    return true;
  }
  let nextLine = startLine;
  let endStart = mem;
  let endPos = pos;
  for (; ; ) {
    nextLine++;
    if (nextLine >= endLine) {
      break;
    }
    endStart = state.bMarks[nextLine] + state.tShift[nextLine];
    const max2 = state.eMarks[nextLine];
    if (endStart < max2 && state.sCount[nextLine] < state.blkIndent) {
      break;
    }
    const startCharCode = state.src.charCodeAt(endStart);
    if (startCharCode !== tabMarkerCode) {
      continue;
    }
    const p = state.skipChars(endStart + 1, marker);
    if (p - endStart !== tabMarkerLen) {
      continue;
    }
    endPos = p;
    break;
  }
  const oldParent = state.parentType;
  const oldLineMax = state.lineMax;
  state.parentType = "tab";
  state.lineMax = nextLine;
  const startToken = state.push("tab_open", "div", 1);
  startToken.markup = state.src.slice(mem, pos);
  startToken.block = true;
  startToken.info = state.src.slice(pos, max).trimStart();
  startToken.map = [startLine, nextLine - 1];
  state.md.block.tokenize(state, startLine + 1, nextLine);
  const endToken = state.push("tab_close", "div", -1);
  endToken.markup = state.src.slice(endStart, endPos);
  endToken.block = true;
  state.parentType = oldParent;
  state.lineMax = oldLineMax;
  state.line = nextLine;
  return true;
};

// src/node/markdownPlugin.ts
var parseTabsParams = (input) => {
  const match = input.match(/key:(\S+)/);
  return {
    shareStateKey: match == null ? void 0 : match[1]
  };
};
var tabsPlugin = (md) => {
  md.use(import_markdown_it_container.default, "tabs", {
    render(tokens, index) {
      const token = tokens[index];
      if (token.nesting === 1) {
        const params = parseTabsParams(token.info);
        const shareStateKeyProp = params.shareStateKey ? `sharedStateKey="${md.utils.escapeHtml(params.shareStateKey)}"` : "";
        return `<PluginTabs ${shareStateKeyProp}>
`;
      } else {
        return `</PluginTabs>
`;
      }
    }
  });
  md.block.ruler.after("container_tabs", "tab", ruleBlockTab);
  const renderTab = (tokens, index) => {
    const token = tokens[index];
    if (token.nesting === 1) {
      const label = token.info;
      const labelProp = `label="${md.utils.escapeHtml(label)}"`;
      return `<PluginTabsTab ${labelProp}>
`;
    } else {
      return `</PluginTabsTab>
`;
    }
  };
  md.renderer.rules["tab_open"] = renderTab;
  md.renderer.rules["tab_close"] = renderTab;
};
export {
  tabsPlugin as tabsMarkdownPlugin
};
