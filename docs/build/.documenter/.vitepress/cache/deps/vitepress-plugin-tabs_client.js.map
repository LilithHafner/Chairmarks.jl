{
  "version": 3,
  "sources": ["../../../../../node_modules/vitepress-plugin-tabs/src/client/index.ts", "../../../../../node_modules/vitepress-plugin-tabs/src/client/useTabsSelectedState.ts"],
  "sourcesContent": ["import type { App } from 'vue'\nimport PluginTabs from './PluginTabs.vue'\nimport PluginTabsTab from './PluginTabsTab.vue'\nimport { provideTabsSharedState } from './useTabsSelectedState'\n\nexport const enhanceAppWithTabs = (app: App) => {\n  provideTabsSharedState(app)\n  app.component('PluginTabs', PluginTabs)\n  app.component('PluginTabsTab', PluginTabsTab)\n}\n", "import { ref, computed, reactive, inject, watch, onMounted } from 'vue'\nimport type { App, Ref, InjectionKey } from 'vue'\n\ntype TabsSharedState = {\n  content?: TabsSharedStateContent\n}\ntype TabsSharedStateContent = Record<string, string>\n\nconst injectionKey: InjectionKey<TabsSharedState> =\n  'vitepress:tabSharedState' as unknown as symbol\nconst ls = typeof localStorage !== 'undefined' ? localStorage : null\nconst localStorageKey = 'vitepress:tabsSharedState'\n\nconst getLocalStorageValue = (): TabsSharedStateContent => {\n  const rawValue = ls?.getItem(localStorageKey)\n  if (rawValue) {\n    try {\n      return JSON.parse(rawValue)\n    } catch {}\n  }\n  return {}\n}\nconst setLocalStorageValue = (v: TabsSharedStateContent) => {\n  if (!ls) return\n  ls.setItem(localStorageKey, JSON.stringify(v))\n}\n\nexport const provideTabsSharedState = (app: App) => {\n  const state = reactive<TabsSharedState>({})\n  watch(\n    () => state.content,\n    (newStateContent, oldStateContent) => {\n      // skip initialize\n      if (newStateContent && oldStateContent) {\n        setLocalStorageValue(newStateContent)\n      }\n    },\n    { deep: true }\n  )\n\n  app.provide(injectionKey, state)\n}\n\nexport const useTabsSelectedState = <T extends string>(\n  acceptValues: Ref<T[]>,\n  sharedStateKey: Ref<string | undefined>\n) => {\n  const sharedState = inject(injectionKey)\n  if (!sharedState) {\n    throw new Error(\n      '[vitepress-plugin-tabs] TabsSharedState should be injected'\n    )\n  }\n\n  onMounted(() => {\n    if (!sharedState.content) {\n      sharedState.content = getLocalStorageValue()\n    }\n  })\n\n  const nonSharedState = ref<T | undefined>()\n\n  const selected = computed({\n    get() {\n      const key = sharedStateKey.value\n      const acceptVals = acceptValues.value\n      if (key) {\n        const value = sharedState.content?.[key]\n        if (value && (acceptVals as string[]).includes(value)) {\n          return value as T\n        }\n      } else {\n        const nonSharedStateVal = nonSharedState.value\n        if (nonSharedStateVal) {\n          return nonSharedStateVal\n        }\n      }\n      return acceptVals[0]\n    },\n    set(v) {\n      const key = sharedStateKey.value\n      if (key) {\n        if (sharedState.content) {\n          sharedState.content[key] = v\n        }\n      } else {\n        nonSharedState.value = v\n      }\n    }\n  })\n  const select = (newValue: T) => {\n    selected.value = newValue\n  }\n\n  return { selected, select }\n}\n"],
  "mappings": ";;;;;;AACA,OAAO,gBAAgB;AACvB,OAAO,mBAAmB;;;ACM1B,IAAM,eACJ;AACF,IAAM,KAAK,OAAO,iBAAiB,cAAc,eAAe;AAChE,IAAM,kBAAkB;AAWxB,IAAM,uBAAuB,CAAC,MAA8B;AAC1D,MAAI,CAAC;AAAI;AACT,KAAG,QAAQ,iBAAiB,KAAK,UAAU,CAAC,CAAC;AAC/C;AAEO,IAAM,yBAAyB,CAAC,QAAa;AAClD,QAAM,QAAQ,SAA0B,CAAC,CAAC;AAC1C;AAAA,IACE,MAAM,MAAM;AAAA,IACZ,CAAC,iBAAiB,oBAAoB;AAEpC,UAAI,mBAAmB,iBAAiB;AACtC,6BAAqB,eAAe;AAAA,MACtC;AAAA,IACF;AAAA,IACA,EAAE,MAAM,KAAK;AAAA,EACf;AAEA,MAAI,QAAQ,cAAc,KAAK;AACjC;;;ADpCO,IAAM,qBAAqB,CAAC,QAAa;AAC9C,yBAAuB,GAAG;AAC1B,MAAI,UAAU,cAAc,UAAU;AACtC,MAAI,UAAU,iBAAiB,aAAa;AAC9C;",
  "names": []
}
